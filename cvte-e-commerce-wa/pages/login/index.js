"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../../lib/vuefy/index");
var route_1 = require("../../utils/route");
var app = getApp();
Page({
    data: {
        code: '',
        checked: false
    },
    runComputed: function () {
        index_1.computed(this, {});
    },
    jumpTo: function (e) {
        console.log(e);
        route_1.navTo("/pages/agreement/index?p=" + e.currentTarget.dataset.page);
    },
    getPhoneAuth: function (e) {
        var _this = this;
        var code = this.data.code;
        app.store.Auth
            .getUserPhoneAndRegister(e, true, code)
            .then(function (data) {
            if (!!data) {
                app.store.Auth
                    .getSystemUser()
                    .then(function () {
                    return app.store.Auth.judgeMarkerExpand();
                }).then(function () {
                    return app.store.Auth.judgeDistributor();
                }).then(function () {
                    wx.showToast({
                        title: '注册成功！'
                    });
                    wx.navigateBack({
                        delta: 1
                    });
                });
            }
        })
            .catch(function (e) {
            _this.login();
        });
    },
    noPass: function () {
        var checked = this.data.checked;
        !checked && wx.showToast({
            icon: 'none',
            title: '请勾选注册协议'
        });
    },
    login: function () {
        var _this = this;
        wx.login({
            success: function (res) {
                _this.setData({
                    code: res.code
                });
            }
        });
    },
    onCheck: function (_a) {
        var detail = _a.detail;
        var value = detail.value;
        this.setData({
            checked: value.length > 0
        });
    },
    onLoad: function () {
        this.login();
    },
    onShow: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLCtDQUFpRDtBQUNqRCwyQ0FBMEM7QUFFMUMsSUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFXLENBQUM7QUFFOUIsSUFBSSxDQUFDO0lBRUQsSUFBSSxFQUFFO1FBR0YsSUFBSSxFQUFFLEVBQUU7UUFFUixPQUFPLEVBQUUsS0FBSztLQUVqQjtJQUVELFdBQVc7UUFDUCxnQkFBUSxDQUFFLElBQUksRUFBRSxFQUdmLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLFlBQUMsQ0FBQztRQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixhQUFLLENBQUMsOEJBQTRCLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQU0sQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFHRCxZQUFZLFlBQUUsQ0FBQztRQUFmLGlCQXlCQztRQXhCVyxJQUFBLHFCQUFJLENBQWU7UUFDM0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJO2FBQ1QsdUJBQXVCLENBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUU7YUFDeEMsSUFBSSxDQUFFLFVBQUEsSUFBSTtZQUNQLElBQUssQ0FBQyxDQUFDLElBQUksRUFBRztnQkFDVixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUk7cUJBQ1QsYUFBYSxFQUFHO3FCQUNoQixJQUFJLENBQUM7b0JBQ0YsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2dCQUM5QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ0osT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ0osRUFBRSxDQUFDLFNBQVMsQ0FBQzt3QkFDVCxLQUFLLEVBQUUsT0FBTztxQkFDakIsQ0FBQyxDQUFDO29CQUNILEVBQUUsQ0FBQyxZQUFZLENBQUM7d0JBQ1osS0FBSyxFQUFFLENBQUM7cUJBQ1gsQ0FBQyxDQUFBO2dCQUNOLENBQUMsQ0FBQyxDQUFDO2FBQ1Y7UUFDTCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUUsVUFBQSxDQUFDO1lBQ0wsS0FBSSxDQUFDLEtBQUssRUFBRyxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUdELE1BQU07UUFDTSxJQUFBLDJCQUFPLENBQWU7UUFDOUIsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUNyQixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxTQUFTO1NBQ25CLENBQUMsQ0FBQztJQUNQLENBQUM7SUFHRCxLQUFLO1FBQUwsaUJBUUM7UUFQRyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ0wsT0FBTyxFQUFFLFVBQUEsR0FBRztnQkFDUixLQUFJLENBQUMsT0FBUSxDQUFDO29CQUNWLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtpQkFDakIsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxPQUFPLFlBQUMsRUFBVTtZQUFSLGtCQUFNO1FBQ0osSUFBQSxvQkFBSyxDQUFZO1FBQ3pCLElBQUksQ0FBQyxPQUFRLENBQUM7WUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDO1NBQzVCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLEtBQUssRUFBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNO0lBRU4sQ0FBQztDQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWcgZnJvbSAnLi4vLi4vY29uZmlnL2luZGV4JztcbmltcG9ydCB7IElBcHAgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsXCI7XG5pbXBvcnQgeyBodHRwIH0gZnJvbSAnLi4vLi4vdXRpbHMvaHR0cCc7XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJy4uLy4uL2xpYi92dWVmeS9pbmRleCc7XG5pbXBvcnQgeyBuYXZUbyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlJztcblxuY29uc3QgYXBwID0gZ2V0QXBwPCBJQXBwID4oICk7XG5cblBhZ2Uoe1xuXG4gICAgZGF0YToge1xuXG4gICAgICAgIC8qKiDnmbvpmYZjb2RlICovXG4gICAgICAgIGNvZGU6ICcnLFxuXG4gICAgICAgIGNoZWNrZWQ6IGZhbHNlXG5cbiAgICB9LFxuXG4gICAgcnVuQ29tcHV0ZWQoICkge1xuICAgICAgICBjb21wdXRlZCggdGhpcywge1xuXG5cbiAgICAgICAgfSk7IFxuICAgIH0sXG5cbiAgICBqdW1wVG8oZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICBuYXZUbyhgL3BhZ2VzL2FncmVlbWVudC9pbmRleD9wPSR7ZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQucGFnZX1gKTtcbiAgICB9LFxuXG4gICAgLyoqIOiOt+WPlueUteivneaOiOadg+OAgeazqOWGjCAqL1xuICAgIGdldFBob25lQXV0aCggZSApIHtcbiAgICAgICAgY29uc3QgeyBjb2RlIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgIGFwcC5zdG9yZS5BdXRoXG4gICAgICAgICAgICAuZ2V0VXNlclBob25lQW5kUmVnaXN0ZXIoIGUsIHRydWUsIGNvZGUgKVxuICAgICAgICAgICAgLnRoZW4oIGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGlmICggISFkYXRhICkge1xuICAgICAgICAgICAgICAgICAgICBhcHAuc3RvcmUuQXV0aFxuICAgICAgICAgICAgICAgICAgICAgICAgLmdldFN5c3RlbVVzZXIoIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCggKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwcC5zdG9yZS5BdXRoLmp1ZGdlTWFya2VyRXhwYW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBwLnN0b3JlLkF1dGguanVkZ2VEaXN0cmlidXRvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3guc2hvd1RvYXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfms6jlhozmiJDlip/vvIEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3gubmF2aWdhdGVCYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCggZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbiggKTtcbiAgICAgICAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qKiDmnKrli77pgInms6jlhozljY/orq4gKi9cbiAgICBub1Bhc3MoICkge1xuICAgICAgICBjb25zdCB7IGNoZWNrZWQgfSA9IHRoaXMuZGF0YTtcbiAgICAgICAgIWNoZWNrZWQgJiYgd3guc2hvd1RvYXN0KHtcbiAgICAgICAgICAgIGljb246ICdub25lJyxcbiAgICAgICAgICAgIHRpdGxlOiAn6K+35Yu+6YCJ5rOo5YaM5Y2P6K6uJ1xuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqIOiOt+WPlmNvZGUgKi9cbiAgICBsb2dpbiggKSB7XG4gICAgICAgIHd4LmxvZ2luKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHJlcy5jb2RlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIG9uQ2hlY2soeyBkZXRhaWwgfSkge1xuICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSBkZXRhaWw7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICAgICAgY2hlY2tlZDogdmFsdWUubGVuZ3RoID4gMFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgb25Mb2FkKCApIHtcbiAgICAgICAgdGhpcy5sb2dpbiggKTtcbiAgICB9LFxuXG4gICAgb25TaG93KCApIHtcblxuICAgIH1cbn0pXG4iXX0=