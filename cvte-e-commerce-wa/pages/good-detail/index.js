"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("../../utils/http");
var index_1 = require("../../lib/vuefy/index");
var route_1 = require("../../utils/route");
var util_1 = require("../../utils/util");
var constant_1 = require("../../utils/constant");
var app = getApp();
Page({
    data: {
        canShareConpons: false,
        id: '',
        skuid: '',
        isIPhoneX: false,
        shareCouponParams: '',
        isMarkerExpand: false,
        isDistributor: false,
        detail: null,
        banner: [],
        skus: [],
        selectedSku: null,
        comfirmSku: null,
        coupons: [],
        showHome: false
    },
    enterTime: 0,
    runComputed: function () {
        index_1.computed(this, {
            smallCoupons$: function () {
                var coupons = this.data.coupons;
                var result = coupons.map(function (c, k) {
                    var _a = c.meta, fullReduceMinPrice = _a.fullReduceMinPrice, fullReduceNum = _a.fullReduceNum;
                    var meta = {
                        bg: k % 2 === 1 ? '#444' : '',
                        label: c.smallTips
                    };
                    return meta;
                });
                return result;
            }
        });
    },
    watchApp: function () {
        var _this = this;
        app.watch$('Auth.isMarkerExpand', function (v) {
            _this.setData({
                isMarkerExpand: v
            });
        });
        app.watch$('Auth.isDistributor', function (v) {
            _this.setData({
                isDistributor: v
            });
        });
        app.watch$('Auth.sysUserInfo', function (v) {
            !!v && _this.fetchGood();
        });
        app.watch$('Common.isIPhoneX', function (v) {
            _this.setData({
                isIPhoneX: v
            });
        });
    },
    fetchGood: function (id) {
        var _this = this;
        var skuid = this.data.skuid;
        var gid = typeof id === 'string' ? id : this.data.id;
        http_1.http({
            path: "/apis/goods/detail/" + gid
        }).then(function (res) {
            var status = res.status, data = res.data;
            if (status !== 200) {
                return;
            }
            var sortSku = [];
            var skus = data.skus;
            var targetSku = skus.find(function (x) { return x.id === skuid; });
            var targetSkuIndex = skus.findIndex(function (x) { return x.id === skuid; });
            if (!!targetSku) {
                skus.splice(targetSkuIndex, 1);
                sortSku = [
                    targetSku
                ].concat(skus);
            }
            else {
                sortSku = skus.filter(function (x) { return Array.isArray(x.myCoupons) && x.myCoupons.length > 0; }).concat(skus.filter(function (x) { return !(Array.isArray(x.myCoupons) && x.myCoupons.length > 0); }));
            }
            _this.setData({
                detail: data,
                skus: sortSku
            });
            try {
                _this.getUserCoupons(data.skuId);
                wx.stopPullDownRefresh({});
            }
            catch (e) { }
        });
    },
    fetchCouonShareKey: function (skuId) {
        var _this = this;
        if (!skuId) {
            return;
        }
        http_1.http({
            errMsg: 'none',
            loadingMsg: 'none',
            path: "/apis/partner/share-sku-url?skuId=" + skuId
        }).then(function (res) {
            var status = res.status, data = res.data;
            if (status !== 200) {
                return;
            }
            var shareCouponParams = data.split('?')[1];
            _this.setData({
                shareCouponParams: shareCouponParams
            });
        });
    },
    initShowHome: function () {
        this.setData({
            showHome: getCurrentPages().length === 1
        });
    },
    onShowSku: function () {
        var this_ = this;
        var detail = this.data.detail;
        var sku = this_.selectComponent('#sku');
        if (!!detail && detail.disabled) {
            return;
        }
        sku.open();
    },
    onShowCoupon: function () {
        var this_ = this;
        var sku = this_.selectComponent('#coupon');
        sku.open();
    },
    onChangeSku: function (_a) {
        var detail = _a.detail;
        var myCoupons = detail.myCoupons || [];
        this.setData({
            selectedSku: detail,
            coupons: myCoupons.map(util_1.couponToFront),
            banner: detail.bannerImgs
        });
        this.fetchCouonShareKey(detail.id);
    },
    previewImg: function (_a) {
        var currentTarget = _a.currentTarget;
        return;
        var _b = currentTarget.dataset, img = _b.img, imgs = _b.imgs;
        wx.previewImage({
            current: img,
            urls: imgs
        });
    },
    onConfirmSku: function (_a) {
        var detail = _a.detail;
        var sku = detail.sku;
        this.setData({
            comfirmSku: sku
        });
        if (!app.store.Auth.sysUserInfo.id) {
            route_1.navTo('/pages/login/index');
        }
        else {
            route_1.navTo("/pages/fill-order/index?skuIds=" + sku.id + "&counts=" + sku.count$);
        }
    },
    goHome: function () {
        wx.redirectTo({
            url: '/pages/main-page/index'
        });
    },
    onLoad: function (query) {
        if (query.im) {
            wx.setStorageSync(constant_1.StorageKey.REGISTER_INVITER, query.im);
            wx.setStorageSync(constant_1.StorageKey.REGISTER_INVITER_TYPE, constant_1.InviteType.SHARE_GOODS);
        }
        this.setData({
            skuid: query.skuid || '',
            id: query.id || query.skuid || 'good001'
        });
        this.watchApp();
        this.runComputed();
        this.initShowHome();
    },
    onShow: function () {
        this.enterTime = new Date().getTime();
    },
    onHide: function () {
        app.dataBury$([{
                "$code": "orderDetailPage",
                "$ts": this.enterTime,
                "enterTime": this.enterTime,
                "leaveTime": new Date().getTime(),
                "goodsId": this.data.id
            }]);
    },
    onPullDownRefresh: function () {
        this.fetchGood();
    },
    getUserCoupons: function (id) {
        var _this = this;
        http_1.http({
            errMsg: 'none',
            loadingMsg: 'none',
            path: "/apis/distributor/current_user_coupon?skuId=" + id
        }).then(function (res) {
            var status = res.status, data = res.data;
            if (status !== 200) {
                return;
            }
            data.length > 0 && _this.setData({
                canShareConpons: true
            });
        });
    },
    onShareAppMessage: function (e) {
        var type = e.target.dataset.type;
        var _a = this.data, id = _a.id, detail = _a.detail, selectedSku = _a.selectedSku, shareCouponParams = _a.shareCouponParams;
        var mainImg = selectedSku.bannerImgs[0];
        var memberId = app.store.Auth.sysUserInfo.id;
        app.dataBury$([{
                "$code": "shareApp",
                "$ts": new Date().getTime(),
                "goodsId": id
            }]);
        var meta = {
            title: selectedSku.title + " " + detail.title,
        };
        if (mainImg.indexOf('cloud') !== 0) {
            meta = __assign({}, meta, { imageUrl: mainImg });
        }
        if (type === '1' && this.data.canShareConpons) {
            return __assign({}, meta, { path: "/pages/receive-coupon/index?im=" + memberId + "&" + shareCouponParams });
        }
        else {
            return __assign({}, meta, { path: "/pages/good-detail/index?id=" + id + "&im=" + memberId });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,