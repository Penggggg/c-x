"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
Component({
    properties: {
        skus: {
            type: Array,
            value: [],
            observer: 'initSelectedSku'
        }
    },
    data: {
        isIPhoneX: false,
        selectedSku: null,
        open: false,
        animationSku: null,
        animationSkuBg: null,
        isUserAuth: false,
        selectdSkuCount: 1
    },
    methods: {
        checkAuth: function () {
            var this_ = this;
            app.watch$('Auth.isUserAuth', function (val) {
                if (val === undefined) {
                    return;
                }
                this_.setData({
                    isUserAuth: val
                });
            });
        },
        getUserAuth: function () {
            var this_ = this;
            app.store
                .Auth.getUserAuth()
                .then(function () {
                this_.confirmSelect();
            });
        },
        getPhoneAuth: function (e) {
            app.store.Auth.getUserPhoneAndRegister(e)
                .then(function (data) { return console.log('...', data); });
        },
        initSelectedSku: function () {
            var this_ = this;
            var skus = this_.data.skus;
            console.log('我的sku', skus);
            if (!skus || skus.length === 0) {
                return;
            }
            var defaultSkuIndex = skus.findIndex(function (x) { return !!x.canSelect; });
            if (defaultSkuIndex !== -1) {
                var defaultSku = skus[defaultSkuIndex];
                this_.setData({
                    selectedSku: defaultSku
                });
                console.log('我的skussssss', this_.data.selectedSku);
                if (defaultSku.count) {
                    this_.setData({
                        selectdSkuCount: defaultSku.count
                    });
                }
                this_.triggerEvent('change', defaultSku);
            }
        },
        close: function () {
            var this_ = this;
            this_.triggerEvent('toggle', false);
            this_.setData({
                open: false
            });
            this.setAnimate();
        },
        open: function () {
            var this_ = this;
            var open = this_.data.open;
            this_.setData({
                open: true
            });
            this.setAnimate();
        },
        setAnimate: function () {
            var this_ = this;
            var _a = this_.data, open = _a.open, isIPhoneX = _a.isIPhoneX;
            var animationSkuMeta = wx.createAnimation({
                duration: 250,
                timingFunction: 'ease-out',
                transformOrigin: '50% 50%',
            });
            var animationSkuBgMeta = wx.createAnimation({
                duration: 250,
                timingFunction: 'ease-out',
                transformOrigin: '50% 50%',
            });
            if (open) {
                var height = isIPhoneX ? '-72vh' : '-70vh';
                animationSkuMeta.opacity(0.3).translateY(height).opacity(1).step();
                animationSkuBgMeta.opacity(1).step();
            }
            else {
                animationSkuMeta.opacity(0.5).translateY('70vh').opacity(0).step();
                animationSkuBgMeta.opacity(0).step();
            }
            this_.setData({
                animationSku: animationSkuMeta.export(),
                animationSkuBg: animationSkuBgMeta.export()
            });
        },
        preventTouchMove: function () {
        },
        previewImg: function (_a) {
            var currentTarget = _a.currentTarget;
            var img = currentTarget.dataset.img;
            wx.previewImage({
                current: img,
                urls: [img]
            });
        },
        onSelectSku: function (_a) {
            var currentTarget = _a.currentTarget;
            var this_ = this;
            var tappingSku = currentTarget.dataset.standard;
            if (!tappingSku.canSelect) {
                return;
            }
            this_.setData({
                selectdSkuCount: 1,
                selectedSku: tappingSku
            });
            this_.triggerEvent('change', tappingSku);
        },
        onSkuCount: function (_a) {
            var detail = _a.detail;
            var this_ = this;
            this_.setData({
                selectdSkuCount: detail.number
            });
        },
        confirmSelect: function (e) {
            var this_ = this;
            var _a = this_.data, selectedSku = _a.selectedSku, selectdSkuCount = _a.selectdSkuCount;
            this_.triggerEvent('confirm', {
                sku: __assign({}, selectedSku, { count$: selectdSkuCount }),
            });
            this_.close();
        },
        watchApp: function () {
            var _this = this;
            app.watch$('Common.isIPhoneX', function (v) {
                _this.setData({
                    isIPhoneX: v
                });
            });
        },
    },
    attached: function () {
        this.watchApp();
        this.checkAuth();
    }
});
//# sourceMappingURL=data:application/json;base64,