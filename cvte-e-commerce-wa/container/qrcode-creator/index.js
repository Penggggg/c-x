"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../utils/http.js");
var cloudHttp_1 = require("../../utils/cloudHttp");
Component({
    properties: {
        page: {
            type: String,
            value: '',
            observer: 'onPageChange'
        },
        scene: {
            type: String,
            value: '',
            observer: 'onSceneChange'
        },
        timeout: {
            type: Number,
            value: 0
        },
        scale: {
            type: Number,
            value: 0.9
        },
        shadow: {
            type: Boolean,
            value: true
        }
    },
    data: {
        loading: true,
        canvasHeight: 0,
        canvasWidth: 0,
        countdown: 0,
        timer: null
    },
    methods: {
        onPageChange: function (v) {
            var this_ = this;
            var scene = this_.data.scene;
            this.createQrCode(v, scene);
        },
        onSceneChange: function (v) {
            var this_ = this;
            var page = this_.data.page;
            this.createQrCode(page, v);
            this.keepSk(v);
        },
        createQrCode: function (page, scene) {
            var _this = this;
            var this_ = this;
            var scale = this_.data.scale;
            if (!page) {
                return;
            }
            cloudHttp_1.cloudHttp({
                url: 'auth_qrCode',
                data: {
                    page: page,
                    scene: scene
                },
                success: function (res) {
                    var wx_ = wx;
                    var status = res.status, data = res.data;
                    var fsm = wx.getFileSystemManager();
                    var ctx = wx_.createCanvasContext('c1', _this);
                    var qrCode = wx_.env.USER_DATA_PATH + '/wa_qrcode_temp.png';
                    if (res.status !== 200) {
                        return;
                    }
                    try {
                        fsm.removeSavedFile({
                            filePath: qrCode
                        });
                    }
                    catch (e) { }
                    fsm.writeFileSync(qrCode, data, 'binary');
                    wx.getSystemInfo({
                        success: function (system) {
                            var windowWidth = system.windowWidth, windowHeight = system.windowHeight;
                            var canvasWidth = Number((windowWidth * scale).toFixed(0));
                            ctx.fillStyle = '#fff';
                            ctx.fillRect(0, 0, canvasWidth, canvasWidth);
                            this_.setData({
                                canvasWidth: canvasWidth,
                                canvasHeight: canvasWidth
                            });
                            console.log('重新绘了');
                            ctx.drawImage(qrCode, 0, 0, canvasWidth, canvasWidth);
                            ctx.draw(false, function () {
                                this_.setData({
                                    loading: false
                                });
                                _this.checkTimeout();
                                this_.triggerEvent('load', true);
                            });
                        }
                    });
                }
            });
        },
        checkTimeout: function () {
            var this_ = this;
            var now = Date.now();
            var timeout = this_.data.timeout;
            if (!timeout) {
                return;
            }
            var deal = Number(((Number(timeout) - now) / 1000).toFixed(0));
            this_.setData({
                countdown: deal
            });
        },
        keepSk: function (scene, timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = 30 * 1000; }
            var this_ = this;
            var sceneArr = scene.split('&');
            var skTarget = sceneArr.find(function (x) { return x.indexOf('sk=') === 0; });
            if (!skTarget) {
                return;
            }
            var sk = skTarget.split('=')[1];
            this_.setData({
                timer: setInterval(function () {
                    _this.fetchKeepSk(sk);
                }, timeout)
            });
        },
        fetchKeepSk: function (sk) {
            if (!sk) {
                return;
            }
            http_js_1.http({
                errMsg: 'none',
                loadingMsg: 'none',
                path: "/apis/common/sk-renew?sk=" + sk
            });
        }
    },
    attached: function () {
    },
    detached: function () {
        var timer = this.data.timer;
        if (timer) {
            clearInterval(timer);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,