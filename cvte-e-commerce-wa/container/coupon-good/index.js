"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
Component({
    properties: {
        coupons: {
            type: Array,
            value: []
        }
    },
    data: {
        isIPhoneX: false,
        open: false,
        animationSku: null,
        animationSkuBg: null,
    },
    methods: {
        close: function () {
            var this_ = this;
            this_.triggerEvent('toggle', false);
            this_.setData({
                open: false
            });
            this.setAnimate();
        },
        open: function () {
            var this_ = this;
            var open = this_.data.open;
            this_.setData({
                open: true
            });
            this.setAnimate();
        },
        setAnimate: function () {
            var this_ = this;
            var _a = this_.data, open = _a.open, isIPhoneX = _a.isIPhoneX;
            var animationSkuMeta = wx.createAnimation({
                duration: 250,
                timingFunction: 'ease-out',
                transformOrigin: '50% 50%',
            });
            var animationSkuBgMeta = wx.createAnimation({
                duration: 250,
                timingFunction: 'ease-out',
                transformOrigin: '50% 50%',
            });
            if (open) {
                var height = isIPhoneX ? '-62vh' : '-60vh';
                animationSkuMeta.opacity(0.3).translateY(height).opacity(1).step();
                animationSkuBgMeta.opacity(1).step();
            }
            else {
                animationSkuMeta.opacity(0.5).translateY('60vh').opacity(0).step();
                animationSkuBgMeta.opacity(0).step();
            }
            this_.setData({
                animationSku: animationSkuMeta.export(),
                animationSkuBg: animationSkuBgMeta.export()
            });
        },
        preventTouchMove: function () {
        },
        confirmSelect: function (e) {
            var this_ = this;
            this_.close();
        },
        watchApp: function () {
            var _this = this;
            app.watch$('Common.isIPhoneX', function (v) {
                _this.setData({
                    isIPhoneX: v
                });
            });
        }
    },
    attached: function () {
        this.watchApp();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU1BLElBQU0sR0FBRyxHQUFHLE1BQU0sRUFBVyxDQUFDO0FBTTlCLFNBQVMsQ0FBQztJQUtOLFVBQVUsRUFBRTtRQW1CUixPQUFPLEVBQUU7WUFDTCxJQUFJLEVBQUUsS0FBSztZQUNYLEtBQUssRUFBRSxFQUFHO1NBQ2I7S0FDSjtJQUtELElBQUksRUFBRTtRQUVGLFNBQVMsRUFBRSxLQUFLO1FBR2hCLElBQUksRUFBRSxLQUFLO1FBR1gsWUFBWSxFQUFFLElBQUk7UUFHbEIsY0FBYyxFQUFFLElBQUk7S0FFdkI7SUFLRCxPQUFPLEVBQUU7UUFHTCxLQUFLO1lBQ0QsSUFBTSxLQUFLLEdBQUksSUFBWSxDQUFDO1lBQzVCLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBRSxDQUFDO1lBQ3JDLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ1YsSUFBSSxFQUFFLEtBQUs7YUFDZCxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsVUFBVSxFQUFHLENBQUM7UUFDdkIsQ0FBQztRQUdELElBQUk7WUFDQSxJQUFNLEtBQUssR0FBSSxJQUFZLENBQUM7WUFDcEIsSUFBQSxzQkFBSSxDQUFnQjtZQUU1QixLQUFLLENBQUMsT0FBTyxDQUFDO2dCQUNWLElBQUksRUFBRSxJQUFJO2FBQ2IsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFVBQVUsRUFBRyxDQUFDO1FBQ3ZCLENBQUM7UUFHRCxVQUFVO1lBQ04sSUFBTSxLQUFLLEdBQUksSUFBWSxDQUFDO1lBQ3RCLElBQUEsZUFBZ0MsRUFBOUIsY0FBSSxFQUFFLHdCQUF3QixDQUFDO1lBRXZDLElBQU0sZ0JBQWdCLEdBQVEsRUFBRSxDQUFDLGVBQWUsQ0FBQztnQkFDN0MsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsY0FBYyxFQUFFLFVBQVU7Z0JBQzFCLGVBQWUsRUFBRSxTQUFTO2FBQzdCLENBQUMsQ0FBQztZQUVILElBQU0sa0JBQWtCLEdBQVEsRUFBRSxDQUFDLGVBQWUsQ0FBQztnQkFDL0MsUUFBUSxFQUFFLEdBQUc7Z0JBQ2IsY0FBYyxFQUFFLFVBQVU7Z0JBQzFCLGVBQWUsRUFBRSxTQUFTO2FBQzdCLENBQUMsQ0FBQztZQUVILElBQUssSUFBSSxFQUFHO2dCQUNSLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQzdDLGdCQUFnQixDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsQ0FBQyxVQUFVLENBQUUsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBRSxDQUFDLElBQUksRUFBRyxDQUFDO2dCQUMxRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFFLENBQUMsSUFBSSxFQUFHLENBQUM7YUFDM0M7aUJBQU07Z0JBQ0gsZ0JBQWdCLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxDQUFDLFVBQVUsQ0FBRSxNQUFNLENBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFFLENBQUMsSUFBSSxFQUFHLENBQUM7Z0JBQzFFLGtCQUFrQixDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUUsQ0FBQyxJQUFJLEVBQUcsQ0FBQzthQUMzQztZQUVELEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ1YsWUFBWSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sRUFBRztnQkFDeEMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sRUFBRzthQUMvQyxDQUFDLENBQUE7UUFFTixDQUFDO1FBR0QsZ0JBQWdCO1FBRWhCLENBQUM7UUFHRCxhQUFhLFlBQUUsQ0FBTTtZQUNqQixJQUFNLEtBQUssR0FBUSxJQUFJLENBQUM7WUFDeEIsS0FBSyxDQUFDLEtBQUssRUFBRyxDQUFDO1FBQ25CLENBQUM7UUFHRCxRQUFRO1lBQVIsaUJBT0M7WUFORyxHQUFHLENBQUMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFVBQUEsQ0FBQztnQkFFM0IsS0FBWSxDQUFDLE9BQVEsQ0FBQztvQkFDbkIsU0FBUyxFQUFFLENBQUM7aUJBQ2YsQ0FBQyxDQUFBO1lBQ04sQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBRUo7SUFFRCxRQUFRLEVBQUU7UUFDTixJQUFJLENBQUMsUUFBUSxFQUFHLENBQUM7SUFDckIsQ0FBQztDQUNKLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElBcHAgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsXCI7XG5pbXBvcnQgeyBuYXZUbyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlLmpzJztcbmltcG9ydCB7IGh0dHAgfSBmcm9tICcuLi8uLi91dGlscy9odHRwLmpzJztcbmltcG9ydCB7IGNsb3VkSHR0cCB9IGZyb20gJy4uLy4uL3V0aWxzL2Nsb3VkSHR0cCc7XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJy4uLy4uL2xpYi92dWVmeS9pbmRleC5qcyc7XG5cbmNvbnN0IGFwcCA9IGdldEFwcDwgSUFwcCA+KCApO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICog5ZWG5ZOB6K+m5oOF55qE5Y2h5Yi45bGV56S65ZmoXG4gKi9cbkNvbXBvbmVudCh7XG5cbiAgICAvKipcbiAgICAgKiDnu4Tku7bnmoTlsZ7mgKfliJfooahcbiAgICAgKi9cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBjb3Vwb27lsZXnpLrpmJ/liJcgXG4gICAgICAgICAqIHtcbiAgICAgICAgICogICAgICBpZCxcbiAgICAgICAgICogICAgICB0eXBlIOWIuOexu+Wei1xuICAgICAgICAgKiAgICAgIHR5cGVMYWJlbCDliLjnsbvlnovkuK3mlodcbiAgICAgICAgICogICAgICBkaXNjb3VudFR5cGUg5LyY5oOg57G75Z6LXG4gICAgICAgICAqICAgICAgdmFsdWUg5LyY5oOg5Lu35qC8L+aKmOaJo1xuICAgICAgICAgKiAgICAgIHVzZWQg5piv5ZCm6IO955So44CBXG4gICAgICAgICAqICAgICAgcGFzc2VkIOaYr+WQpui/h+acn1xuICAgICAgICAgKiAgICAgIHRpcHMg5bCP5paH5qGI5o+Q56S6IOmAl+WPt+malOW8gFxuICAgICAgICAgKiAgICAgIHRpdGxlIOagh+mimFxuICAgICAgICAgKiAgICAgIHN0YXJ0IOacieaViOacnyDlvIDlp4vml7bpl7RcbiAgICAgICAgICogICAgICBlbmQg5pyJ5pWI5pyfIOe7k+adn+aXtumXtFxuICAgICAgICAgKiAgICAgIHVzZVRpcHMg5L2/55So6K+05piOXG4gICAgICAgICAqICAgICAgXG4gICAgICAgICAqIH1bIF1cbiAgICAgICAgICovXG4gICAgICAgIGNvdXBvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgICAgICAgdmFsdWU6IFsgXVxuICAgICAgICB9XG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog57uE5Lu255qE5Yid5aeL5pWw5o2uXG4gICAgICovXG4gICAgZGF0YToge1xuXG4gICAgICAgIGlzSVBob25lWDogZmFsc2UsXG5cbiAgICAgICAgLyoqIOaYr+WQpuWxleW8gCAqL1xuICAgICAgICBvcGVuOiBmYWxzZSxcblxuICAgICAgICAvKiog5Yqo55S7MSAqL1xuICAgICAgICBhbmltYXRpb25Ta3U6IG51bGwsXG5cbiAgICAgICAgLyoqIOWKqOeUuzIgKi9cbiAgICAgICAgYW5pbWF0aW9uU2t1Qmc6IG51bGwsXG5cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnu4Tku7bnmoTmlrnms5XliJfooahcbiAgICAgKi9cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLyoqIOWFs+mXreW8ueeqlyAqL1xuICAgICAgICBjbG9zZSggKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzXyA9ICh0aGlzIGFzIGFueSk7XG4gICAgICAgICAgICB0aGlzXy50cmlnZ2VyRXZlbnQoJ3RvZ2dsZScsIGZhbHNlICk7XG4gICAgICAgICAgICB0aGlzXy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0QW5pbWF0ZSggKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiog5aSW6YOo6LCD55So77ya5bGV5byAICovXG4gICAgICAgIG9wZW4oICkge1xuICAgICAgICAgICAgY29uc3QgdGhpc18gPSAodGhpcyBhcyBhbnkpO1xuICAgICAgICAgICAgY29uc3QgeyBvcGVuIH0gPSB0aGlzXy5kYXRhO1xuXG4gICAgICAgICAgICB0aGlzXy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBvcGVuOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zZXRBbmltYXRlKCApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiDliqjnlLsgKi9cbiAgICAgICAgc2V0QW5pbWF0ZSggKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzXyA9ICh0aGlzIGFzIGFueSk7XG4gICAgICAgICAgICBjb25zdCB7IG9wZW4sIGlzSVBob25lWCB9ID0gdGhpc18uZGF0YTtcblxuICAgICAgICAgICAgY29uc3QgYW5pbWF0aW9uU2t1TWV0YTogYW55ID0gd3guY3JlYXRlQW5pbWF0aW9uKHsgXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MCwgXG4gICAgICAgICAgICAgICAgdGltaW5nRnVuY3Rpb246ICdlYXNlLW91dCcsIFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFuaW1hdGlvblNrdUJnTWV0YTogYW55ID0gd3guY3JlYXRlQW5pbWF0aW9uKHsgXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MCwgXG4gICAgICAgICAgICAgICAgdGltaW5nRnVuY3Rpb246ICdlYXNlLW91dCcsIFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzUwJSA1MCUnLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICggb3BlbiApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBpc0lQaG9uZVggPyAnLTYydmgnIDogJy02MHZoJztcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Ta3VNZXRhLm9wYWNpdHkoIDAuMyApLnRyYW5zbGF0ZVkoIGhlaWdodCApLm9wYWNpdHkoIDEgKS5zdGVwKCApO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblNrdUJnTWV0YS5vcGFjaXR5KCAxICkuc3RlcCggKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU2t1TWV0YS5vcGFjaXR5KCAwLjUgKS50cmFuc2xhdGVZKCAnNjB2aCcgKS5vcGFjaXR5KCAwICkuc3RlcCggKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Ta3VCZ01ldGEub3BhY2l0eSggMCApLnN0ZXAoICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXNfLnNldERhdGEoe1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvblNrdTogYW5pbWF0aW9uU2t1TWV0YS5leHBvcnQoICksXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU2t1Qmc6IGFuaW1hdGlvblNrdUJnTWV0YS5leHBvcnQoIClcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSxcblxuICAgICAgICAvKiog56aB5q2i5ruR5YqoICovXG4gICAgICAgIHByZXZlbnRUb3VjaE1vdmUoICkge1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqIOehruiupCAqL1xuICAgICAgICBjb25maXJtU2VsZWN0KCBlOiBhbnkgKSB7XG4gICAgICAgICAgICBjb25zdCB0aGlzXzogYW55ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXNfLmNsb3NlKCApO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiDnm5HlkKwgKi9cbiAgICAgICAgd2F0Y2hBcHAoICkge1xuICAgICAgICAgICAgYXBwLndhdGNoJCgnQ29tbW9uLmlzSVBob25lWCcsIHYgPT4ge1xuICAgICAgICAgICAgICAgIC8vIOWFvOWuuWlwb25lWFxuICAgICAgICAgICAgICAgICh0aGlzIGFzIGFueSkuc2V0RGF0YSEoe1xuICAgICAgICAgICAgICAgICAgICBpc0lQaG9uZVg6IHZcbiAgICAgICAgICAgICAgICB9KSBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH0sXG5cbiAgICBhdHRhY2hlZDogZnVuY3Rpb24oICkge1xuICAgICAgICB0aGlzLndhdGNoQXBwKCApO1xuICAgIH1cbn0pXG4gICJdfQ==