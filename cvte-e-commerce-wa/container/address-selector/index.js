"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var route_js_1 = require("../../utils/route.js");
var http_js_1 = require("../../utils/http.js");
var util_1 = require("../../utils/util");
var app = getApp();
Component({
    properties: {
        refresh: {
            type: String,
            value: '',
            observer: 'fetchList'
        },
        placeholder: {
            type: String,
            value: '请设置收货地址信息'
        },
        icon: {
            type: Boolean,
            value: true
        },
        setDefault: {
            type: Boolean,
            value: false
        },
        selectedId: {
            type: String,
            value: ''
        },
        transfer: {
            type: Boolean,
            value: false
        }
    },
    data: {
        list: [],
        selecting: null,
        currentIndedx: null,
        lastCreateAddressId: ''
    },
    methods: {
        watchApp: function () {
            var this_ = this;
            app.watch$('Auth.sysUserInfo', function (v) {
                !!v && this_.setData({
                    memberid: v.id
                });
                setTimeout(function () {
                    this_.fetchList();
                }, 50);
            });
            app.watch$('Form.lastCreateAddressId', function (v) {
                !!v && this_.setData({
                    lastCreateAddressId: v
                });
            });
        },
        fetchList: function () {
            var _this = this;
            var this_ = this;
            var _a = this_.data, setDefault = _a.setDefault, memberid = _a.memberid, selectedId = _a.selectedId, lastCreateAddressId = _a.lastCreateAddressId, selecting = _a.selecting;
            if (!memberid) {
                return;
            }
            http_js_1.http({
                path: "/apis/address/my/" + memberid
            }).then(function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                var list = data ? data.map(util_1.addressToFront) : [];
                this_.setData({
                    list: list,
                    loading: false,
                });
                if (setDefault || selectedId || lastCreateAddressId) {
                    var defaultIndex = list.findIndex(function (x) {
                        return selectedId ?
                            x.id === selectedId :
                            lastCreateAddressId ?
                                x.id === lastCreateAddressId :
                                !!x.default;
                    });
                    if (defaultIndex !== -1) {
                        this_.setData({
                            selecting: list[defaultIndex],
                            currentIndedx: defaultIndex
                        });
                        if (lastCreateAddressId) {
                            app.set$('Form.lastCreateAddressId', '');
                        }
                    }
                }
                if (selecting) {
                    var exited = list.find(function (x) { return x.id === selecting.id; });
                    if (!exited) {
                        this_.setData({
                            selecting: null,
                            currentIndedx: null
                        });
                    }
                }
                _this.closePop();
                setTimeout(function () {
                    _this.onTrigger();
                }, 100);
            });
        },
        openPop: function () {
            var this_ = this;
            var list = this_.data.list;
            var pop = this_.selectComponent('#pop');
            if (list.length === 0) {
                route_js_1.navTo('/pages/address-create/index');
            }
            else {
                !!pop && pop.open();
            }
        },
        closePop: function () {
            var this_ = this;
            var pop = this_.selectComponent('#pop');
            !!pop && pop.close();
        },
        onChoice: function (_a) {
            var currentTarget = _a.currentTarget;
            var this_ = this;
            var _b = currentTarget.dataset, data = _b.data, key = _b.key;
            this_.setData({
                selecting: data,
                currentIndedx: key
            });
            this.onTrigger();
            this.closePop();
        },
        onTrigger: function () {
            var this_ = this;
            var _a = this_.data, currentIndedx = _a.currentIndedx, list = _a.list, transfer = _a.transfer;
            if (currentIndedx !== null) {
                var result = transfer ?
                    util_1.addressChangeDataToBack(list[currentIndedx]) :
                    list[currentIndedx];
                this_.triggerEvent('change', result);
            }
        },
        goCreate: function () {
            route_js_1.navTo('/pages/address-create/index');
        }
    },
    attached: function () {
        this.watchApp();
    }
});
//# sourceMappingURL=data:application/json;base64,