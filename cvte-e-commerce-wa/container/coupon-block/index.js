"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
Component({
    properties: {
        data: {
            type: Object,
            value: {},
            observer: 'init'
        },
        showAllTips: {
            type: Boolean,
            value: true
        },
        headColor: {
            type: String,
            value: '#EBC686'
        },
        labelColor: {
            type: String,
            value: '#905128'
        },
        line: {
            type: Boolean,
            value: false
        }
    },
    data: {
        meta: null
    },
    methods: {
        init: function (v) {
            var this_ = this;
            var start = v.start, end = v.end, tips = v.tips;
            var data = this_.data.data;
            this_.setData({
                meta: __assign({}, data, { tips$: tips ? tips.split(',') : [], end$: end ? this_.formatData(end) : undefined, start$: start ? this_.formatData(start) : undefined })
            });
        },
        formatData: function (ts) {
            if (!ts) {
                return '';
            }
            var time = new Date(Number(ts));
            var y = time.getFullYear();
            var m = time.getMonth() + 1;
            var d = time.getDate();
            return y + "." + m + "." + d;
        }
    },
    attached: function () {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBUUEsU0FBUyxDQUFDO0lBS04sVUFBVSxFQUFFO1FBaUJSLElBQUksRUFBRTtZQUNGLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLEVBQUc7WUFDVixRQUFRLEVBQUUsTUFBTTtTQUNuQjtRQUdELFdBQVcsRUFBRTtZQUNULElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLElBQUk7U0FDZDtRQUdELFNBQVMsRUFBRTtZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLFNBQVM7U0FDbkI7UUFHRCxVQUFVLEVBQUU7WUFDUixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxTQUFTO1NBQ25CO1FBR0QsSUFBSSxFQUFFO1lBQ0YsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsS0FBSztTQUNmO0tBQ0o7SUFLRCxJQUFJLEVBQUU7UUFFRixJQUFJLEVBQUUsSUFBSTtLQUViO0lBS0QsT0FBTyxFQUFFO1FBR0wsSUFBSSxZQUFFLENBQUM7WUFFSCxJQUFNLEtBQUssR0FBUSxJQUFJLENBQUM7WUFDaEIsSUFBQSxlQUFLLEVBQUUsV0FBRyxFQUFFLGFBQUksQ0FBTztZQUN2QixJQUFBLHNCQUFJLENBQWdCO1lBQzVCLEtBQUssQ0FBQyxPQUFPLENBQUM7Z0JBQ1YsSUFBSSxlQUNHLElBQUksSUFDUCxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFHLEVBQ25DLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDL0MsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBRSxLQUFLLENBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUN4RDthQUNKLENBQUMsQ0FBQztRQUNQLENBQUM7UUFHRCxVQUFVLFlBQUUsRUFBRTtZQUVWLElBQUssQ0FBQyxFQUFFLEVBQUc7Z0JBQUUsT0FBTyxFQUFFLENBQUM7YUFBRTtZQUV6QixJQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBRSxNQUFNLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FBQztZQUNyQyxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFHLENBQUM7WUFDOUIsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRyxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFHLENBQUM7WUFDMUIsT0FBVSxDQUFDLFNBQUksQ0FBQyxTQUFJLENBQUcsQ0FBQztRQUM1QixDQUFDO0tBRUo7SUFFRCxRQUFRLEVBQUU7SUFFVixDQUFDO0NBQ0osQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmF2VG8gfSBmcm9tICcuLi8uLi91dGlscy9yb3V0ZS5qcyc7XG5pbXBvcnQgeyBodHRwIH0gZnJvbSAnLi4vLi4vdXRpbHMvaHR0cC5qcyc7XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJy4uLy4uL2xpYi92dWVmeS9pbmRleC5qcyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKiDkuIDmlbTlnZfnmoTljaHliLhcbiAqL1xuQ29tcG9uZW50KHtcblxuICAgIC8qKlxuICAgICAqIOe7hOS7tueahOWxnuaAp+WIl+ihqFxuICAgICAqL1xuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHtcbiAgICAgICAgICogICAgICBpZCxcbiAgICAgICAgICogICAgICB0eXBlIOWIuOexu+Wei1xuICAgICAgICAgKiAgICAgIHR5cGVMYWJlbCDliLjnsbvlnovkuK3mlodcbiAgICAgICAgICogICAgICBkaXNjb3VudFR5cGUg5LyY5oOg57G75Z6LXG4gICAgICAgICAqICAgICAgdmFsdWUg5LyY5oOg5Lu35qC8L+aKmOaJo1xuICAgICAgICAgKiAgICAgIHVzZWQg5piv5ZCm6IO955SoXG4gICAgICAgICAqICAgICAgcGFzc2VkIOaYr+WQpui/h+acn1xuICAgICAgICAgKiAgICAgIHRpcHMg5bCP5paH5qGI5o+Q56S6IOmAl+WPt+malOW8gFxuICAgICAgICAgKiAgICAgIHRpdGxlIOagh+mimFxuICAgICAgICAgKiAgICAgIHN0YXJ0IOacieaViOacnyDlvIDlp4vml7bpl7RcbiAgICAgICAgICogICAgICBlbmQg5pyJ5pWI5pyfIOe7k+adn+aXtumXtFxuICAgICAgICAgKiAgICAgIHVzZVRpcHMg5L2/55So6K+05piOXG4gICAgICAgICAqIH1cbiAgICAgICAgICovXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgICAgIHZhbHVlOiB7IH0sXG4gICAgICAgICAgICBvYnNlcnZlcjogJ2luaXQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g5L2/55So6K+05piO5Y+q5bGV56S65LiA6KGMXG4gICAgICAgIHNob3dBbGxUaXBzOiB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSxcblxuICAgICAgICAvKiog5aS06YOo6aKc6ImyICovXG4gICAgICAgIGhlYWRDb2xvcjoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgdmFsdWU6ICcjRUJDNjg2J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiDmoIfnrb7popzoibIgKi9cbiAgICAgICAgbGFiZWxDb2xvcjoge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgdmFsdWU6ICcjOTA1MTI4J1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiDnur/mnaEgKi9cbiAgICAgICAgbGluZToge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcbiAgXG4gICAgLyoqXG4gICAgICog57uE5Lu255qE5Yid5aeL5pWw5o2uXG4gICAgICovXG4gICAgZGF0YToge1xuXG4gICAgICAgIG1ldGE6IG51bGxcblxuICAgIH0sXG4gIFxuICAgIC8qKlxuICAgICAqIOe7hOS7tueahOaWueazleWIl+ihqFxuICAgICAqL1xuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICAvLyDliJ3lp4vljJZcbiAgICAgICAgaW5pdCggdiApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdGhpc186IGFueSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXJ0LCBlbmQsIHRpcHMgfSA9IHY7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IHRoaXNfLmRhdGE7XG4gICAgICAgICAgICB0aGlzXy5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHRpcHMkOiB0aXBzID8gdGlwcy5zcGxpdCgnLCcpIDogWyBdLCBcbiAgICAgICAgICAgICAgICAgICAgZW5kJDogZW5kID8gdGhpc18uZm9ybWF0RGF0YSggZW5kICkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0JDogc3RhcnQgPyB0aGlzXy5mb3JtYXREYXRhKCBzdGFydCApIDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8g5pel5pyfXG4gICAgICAgIGZvcm1hdERhdGEoIHRzICkge1xuXG4gICAgICAgICAgICBpZiAoICF0cyApIHsgcmV0dXJuICcnOyB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZSggTnVtYmVyKCB0cyApKTtcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aW1lLmdldEZ1bGxZZWFyKCApO1xuICAgICAgICAgICAgY29uc3QgbSA9IHRpbWUuZ2V0TW9udGgoICkgKyAxO1xuICAgICAgICAgICAgY29uc3QgZCA9IHRpbWUuZ2V0RGF0ZSggKTtcbiAgICAgICAgICAgIHJldHVybiBgJHt5fS4ke219LiR7ZH1gO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCApIHtcblxuICAgIH1cbn0pXG4gICJdfQ==