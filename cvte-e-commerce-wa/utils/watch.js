"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var oldDataset = {};
exports.watchCallBack = {};
exports.pushCb = function (key, cb) {
    if (!!exports.watchCallBack[key]) {
        exports.watchCallBack[key].push(cb);
    }
    else {
        exports.watchCallBack[key] = [cb];
    }
};
function watch(name, target) {
    var _a;
    oldDataset = Object.assign({}, oldDataset, (_a = {},
        _a[name] = JSON.parse(JSON.stringify(target)),
        _a));
    Object.keys(target).map(function (propsName) {
        Object.defineProperty(target, propsName, {
            configurable: true,
            enumerable: true,
            set: function (val) {
                var _a, _b;
                oldDataset = Object.assign({}, oldDataset, (_a = {},
                    _a[name] = Object.assign({}, oldDataset[name], (_b = {},
                        _b[propsName] = val,
                        _b)),
                    _a));
                setTimeout(function () {
                    console.log('【---- Property Set ----】', propsName, ':', val);
                    if (Array.isArray(exports.watchCallBack[name + "." + propsName])) {
                        exports.watchCallBack[name + "." + propsName].map(function (func) { return func(val); });
                    }
                }, 50);
            },
            get: function () {
                return oldDataset[name][propsName];
            }
        });
    });
    return target;
}
exports.watch = watch;
function getVal(key) {
    return key.split('.').reduce(function (x, y) { return x[y]; }, oldDataset);
}
exports.getVal = getVal;
function updateVal(key, val) {
    var targetKey = key.split('.')[key.split('.').length - 1];
    var beforeTargetKeys = key.split('.').slice(0, key.split('.').length - 1).join('.');
    var target = beforeTargetKeys.split('.').reduce(function (x, y) { return x[y]; }, oldDataset);
    target[targetKey] = val;
    if (Array.isArray(exports.watchCallBack[key])) {
        exports.watchCallBack[key].map(function (func) { return func(val); });
    }
}
exports.updateVal = updateVal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLElBQUksVUFBVSxHQUVWLEVBQUcsQ0FBQztBQUdHLFFBQUEsYUFBYSxHQUVwQixFQUFHLENBQUM7QUFHSyxRQUFBLE1BQU0sR0FBRyxVQUFFLEdBQVcsRUFBRSxFQUFvQztJQUNyRSxJQUFLLENBQUMsQ0FBQyxxQkFBYSxDQUFFLEdBQUcsQ0FBRSxFQUFFO1FBQ3pCLHFCQUFhLENBQUUsR0FBRyxDQUFFLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRSxDQUFDO0tBQ25DO1NBQU07UUFDSCxxQkFBYSxDQUFFLEdBQUcsQ0FBRSxHQUFHLENBQUUsRUFBRSxDQUFFLENBQUM7S0FDakM7QUFDTCxDQUFDLENBQUE7QUFHRCxTQUFnQixLQUFLLENBQUssSUFBWSxFQUFFLE1BQVc7O0lBRS9DLFVBQVUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUcsRUFBRSxVQUFVO1FBQ3RDLEdBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBRSxNQUFNLENBQUUsQ0FBQztZQUNqRCxDQUFDO0lBRUgsTUFBTSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQyxHQUFHLENBQUUsVUFBQSxTQUFTO1FBQ2hDLE1BQU0sQ0FBQyxjQUFjLENBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRTtZQUN0QyxZQUFZLEVBQUUsSUFBSTtZQUNsQixVQUFVLEVBQUUsSUFBSTtZQUNoQixHQUFHLEVBQUUsVUFBVSxHQUFHOztnQkFDZCxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFHLEVBQUUsVUFBVTtvQkFDdEMsR0FBRSxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFHLEVBQUUsVUFBVSxDQUFFLElBQUksQ0FBRTt3QkFDM0MsR0FBRSxTQUFTLElBQUksR0FBRzs0QkFDcEI7d0JBQ0osQ0FBQztnQkFDSCxVQUFVLENBQUM7b0JBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO29CQUM5RCxJQUFLLEtBQUssQ0FBQyxPQUFPLENBQUUscUJBQWEsQ0FBSSxJQUFJLFNBQUksU0FBVyxDQUFDLENBQUMsRUFBRTt3QkFDeEQscUJBQWEsQ0FBSyxJQUFJLFNBQUksU0FBVyxDQUFFLENBQUMsR0FBRyxDQUFFLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFFLEdBQUcsQ0FBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO3FCQUNyRTtnQkFDTCxDQUFDLEVBQUUsRUFBRSxDQUFFLENBQUM7WUFDWixDQUFDO1lBQ0QsR0FBRyxFQUFFO2dCQUNELE9BQU8sVUFBVSxDQUFFLElBQUksQ0FBRSxDQUFFLFNBQVMsQ0FBRSxDQUFDO1lBQzNDLENBQUM7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBRWxCLENBQUM7QUE5QkQsc0JBOEJDO0FBR0QsU0FBZ0IsTUFBTSxDQUFFLEdBQVc7SUFDL0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFFLENBQUMsRUFBRSxDQUFDLElBQU0sT0FBRSxDQUFVLENBQUUsQ0FBQyxDQUFFLEVBQWpCLENBQWlCLEVBQUUsVUFBVSxDQUFFLENBQUM7QUFDN0UsQ0FBQztBQUZELHdCQUVDO0FBR0QsU0FBZ0IsU0FBUyxDQUFFLEdBQVcsRUFBRSxHQUFRO0lBRTVDLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFDOUQsSUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhGLElBQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFNLE9BQUUsQ0FBUyxDQUFFLENBQUMsQ0FBRSxFQUFoQixDQUFnQixFQUFFLFVBQVUsQ0FBRSxDQUFDO0lBQzdGLE1BQU0sQ0FBRSxTQUFTLENBQUUsR0FBRyxHQUFHLENBQUM7SUFHMUIsSUFBSyxLQUFLLENBQUMsT0FBTyxDQUFFLHFCQUFhLENBQUUsR0FBRyxDQUFFLENBQUMsRUFBRTtRQUN2QyxxQkFBYSxDQUFFLEdBQUcsQ0FBRSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBRSxHQUFHLENBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQztLQUNqRDtBQUNMLENBQUM7QUFaRCw4QkFZQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiDml6fmlbDmja7pm4blkIggKi9cbmxldCBvbGREYXRhc2V0OiB7XG4gICAgWyBrZXk6IHN0cmluZyBdOiBhbnlcbn0gPSB7IH07XG5cbi8qKiDnm5HlkKzlh73mlbDnmoTpm4blkIggKi9cbmV4cG9ydCBsZXQgd2F0Y2hDYWxsQmFjazoge1xuICAgIFsga2V5OiBzdHJpbmcgXTogQXJyYXk8KCB2YWwxOiBhbnksIHZhbDI/OiBhbnkgKSA9PiB2b2lkPlxufSA9IHsgfTtcblxuLyoqIOa3u+WKoOebkeWQrOWHveaVsCAqL1xuZXhwb3J0IGNvbnN0IHB1c2hDYiA9ICgga2V5OiBzdHJpbmcsIGNiOiAoIHZhbDE6IGFueSwgdmFsMjogYW55ICkgPT4gdm9pZCApID0+IHtcbiAgICBpZiAoICEhd2F0Y2hDYWxsQmFja1sga2V5IF0pIHtcbiAgICAgICAgd2F0Y2hDYWxsQmFja1sga2V5IF0ucHVzaCggY2IgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3YXRjaENhbGxCYWNrWyBrZXkgXSA9IFsgY2IgXTtcbiAgICB9XG59XG5cbi8qKiDnm5HlkKzlh73mlbAgKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXRjaDxUPiggbmFtZTogc3RyaW5nLCB0YXJnZXQ6IGFueSApOiBUIHtcblxuICAgIG9sZERhdGFzZXQgPSBPYmplY3QuYXNzaWduKHsgfSwgb2xkRGF0YXNldCwge1xuICAgICAgICBbIG5hbWUgXTogSlNPTi5wYXJzZSggSlNPTi5zdHJpbmdpZnkoIHRhcmdldCApKVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMoIHRhcmdldCApLm1hcCggcHJvcHNOYW1lID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KCB0YXJnZXQsIHByb3BzTmFtZSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24oIHZhbCApIHtcbiAgICAgICAgICAgICAgICBvbGREYXRhc2V0ID0gT2JqZWN0LmFzc2lnbih7IH0sIG9sZERhdGFzZXQsIHtcbiAgICAgICAgICAgICAgICAgICAgWyBuYW1lIF06IE9iamVjdC5hc3NpZ24oeyB9LCBvbGREYXRhc2V0WyBuYW1lIF0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsgcHJvcHNOYW1lIF06IHZhbFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+OAkC0tLS0gUHJvcGVydHkgU2V0IC0tLS3jgJEnLCBwcm9wc05hbWUsICc6JywgdmFsICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggQXJyYXkuaXNBcnJheSggd2F0Y2hDYWxsQmFja1tgJHtuYW1lfS4ke3Byb3BzTmFtZX1gXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoQ2FsbEJhY2tbIGAke25hbWV9LiR7cHJvcHNOYW1lfWAgXS5tYXAoIGZ1bmMgPT4gZnVuYyggdmFsICkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkRGF0YXNldFsgbmFtZSBdWyBwcm9wc05hbWUgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcblxufVxuXG4vKiog6I635Y+W5YC8ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsKCBrZXk6IHN0cmluZyApIHtcbiAgICByZXR1cm4ga2V5LnNwbGl0KCcuJykucmVkdWNlKCggeCwgeSApID0+ICggeCBhcyBhbnkgKVsgeSBdLCBvbGREYXRhc2V0ICk7XG59XG5cbi8qKiDmm7TmlrDlgLwgKi9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVWYWwoIGtleTogc3RyaW5nLCB2YWw6IGFueSApIHtcblxuICAgIGNvbnN0IHRhcmdldEtleSA9IGtleS5zcGxpdCgnLicpWyBrZXkuc3BsaXQoJy4nKS5sZW5ndGggLSAxIF07XG4gICAgY29uc3QgYmVmb3JlVGFyZ2V0S2V5cyA9IGtleS5zcGxpdCgnLicpLnNsaWNlKCAwLCBrZXkuc3BsaXQoJy4nKS5sZW5ndGggLSAxICkuam9pbignLicpO1xuXG4gICAgY29uc3QgdGFyZ2V0ID0gYmVmb3JlVGFyZ2V0S2V5cy5zcGxpdCgnLicpLnJlZHVjZSgoIHgsIHkgKSA9PiAoIHggYXMgYW55KVsgeSBdLCBvbGREYXRhc2V0ICk7XG4gICAgdGFyZ2V0WyB0YXJnZXRLZXkgXSA9IHZhbDtcblxuICAgIC8vIOinpuWPkeWbnuiwg1xuICAgIGlmICggQXJyYXkuaXNBcnJheSggd2F0Y2hDYWxsQmFja1sga2V5IF0pKSB7XG4gICAgICAgIHdhdGNoQ2FsbEJhY2tbIGtleSBdLm1hcChmdW5jID0+IGZ1bmMoIHZhbCApKTtcbiAgICB9XG59Il19