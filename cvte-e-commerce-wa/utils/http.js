"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../config/index");
var all_1 = require("../config/all");
var constant_1 = require("../utils/constant");
var httpParam = {
    env: '',
    method: 'GET',
    header: {},
    path: '',
    url: index_1.default.host.default,
    data: {},
    loadingMsg: '加载中....',
    errMsg: '加载错误，请重试',
    allUrl: ''
};
exports.http = function (params$) {
    return new Promise(function (resolve) {
        var params = __assign({}, httpParam, params$);
        var loadingMsg = params.loadingMsg, errMsg = params.errMsg, path = params.path, env = params.env;
        var url = env && all_1.default[env] ?
            all_1.default[env].host.default :
            params.url;
        var data = params.data;
        loadingMsg !== 'none' && wx.showLoading({
            title: loadingMsg,
            mask: true
        });
        var getError = function (msg) {
            wx.showToast({
                icon: 'none',
                title: msg,
                duration: 2000
            });
        };
        var meta = wx.getStorageSync(constant_1.StorageKey.SYSTEM_USER_INFO);
        var sysUser = meta ? JSON.parse(meta) : null;
        var header = Object.assign({}, params$.header);
        if (!!sysUser && sysUser.templateId) {
            header = {
                'wa-jwt': sysUser.jwt || '',
            };
        }
        console.log('-------- 发送请求 --------');
        console.log("" + (params$.allUrl ? params$.allUrl : url + path));
        wx.request({
            data: data,
            header: header,
            method: params$.method ? params$.method.toUpperCase() : 'GET',
            url: params$.allUrl || "" + url + path,
            success: function (res) {
                var _a = res.data, status = _a.status, msg = _a.msg, message = _a.message;
                var hasError = Number(status) !== 200 && Number(status) !== 0;
                if (hasError) {
                    errMsg !== 'none' && getError(message || msg || errMsg);
                    console.error("Http Error\uFF1A" + url + path + " " + JSON.stringify(res.data));
                }
                else {
                    loadingMsg !== 'none' && wx.hideLoading({});
                }
                console.log('-------- 返回结果 --------');
                console.log("" + JSON.stringify(res.data));
                resolve({
                    msg: msg,
                    status: hasError ? 500 : 200,
                    data: res.data.data
                });
            },
            fail: function (e) {
                getError('网络错误');
                console.log('出错了', e);
                resolve({
                    status: 500
                });
            }
        });
    });
};
//# sourceMappingURL=data:application/json;base64,