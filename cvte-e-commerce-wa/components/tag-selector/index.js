"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_js_1 = require("../../lib/vuefy/index.js");
Component({
    properties: {
        data: {
            type: Array
        },
        max: {
            type: Number,
            value: 1
        }
    },
    data: {
        selectedIds: []
    },
    methods: {
        runComputed: function () {
            index_js_1.computed(this, {
                tags$: function () {
                    var _a = this.data, data = _a.data, selectedIds = _a.selectedIds;
                    return data.map(function (x) { return Object.assign({}, x, {
                        selected: selectedIds.find(function (y) { return y === x.id; })
                    }); });
                }
            });
        },
        onSelect: function (_a) {
            var currentTarget = _a.currentTarget;
            var _b = this.data, selectedIds = _b.selectedIds, data = _b.data, max = _b.max;
            var tag = currentTarget.dataset.tag;
            if (max > 1) {
                if (selectedIds.includes(tag.id)) {
                    var index = selectedIds.findIndex(function (x) { return x === tag.id; });
                    selectedIds.splice(index, 1);
                    this.setData({
                        selectedIds: selectedIds.slice()
                    });
                }
                else {
                    selectedIds.push(tag.id);
                    this.setData({
                        selectedIds: selectedIds.slice()
                    });
                }
                ;
            }
            else {
                this.setData({
                    selectedIds: [tag.id]
                });
            }
            var allSelected = max > 1 ?
                data.filter(function (x) {
                    return !!selectedIds.find(function (y) { return y === x.id; });
                }) :
                [tag.id];
            this.triggerEvent('change', allSelected);
        }
    },
    attached: function () {
        this.runComputed();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHFEQUFvRDtBQU1wRCxTQUFTLENBQUM7SUFLTixVQUFVLEVBQUU7UUFHUixJQUFJLEVBQUU7WUFDRixJQUFJLEVBQUUsS0FBSztTQUNkO1FBR0QsR0FBRyxFQUFFO1lBQ0QsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQUUsQ0FBQztTQUNYO0tBQ0o7SUFLRCxJQUFJLEVBQUU7UUFHRixXQUFXLEVBQUUsRUFBRztLQUNuQjtJQUtELE9BQU8sRUFBRTtRQUVMLFdBQVc7WUFDUCxtQkFBUSxDQUFFLElBQUksRUFBRTtnQkFHWixLQUFLO29CQUNLLElBQUEsY0FBaUMsRUFBL0IsY0FBSSxFQUFFLDRCQUF5QixDQUFDO29CQUN4QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBRSxDQUFNLElBQUssT0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUcsRUFBRSxDQUFDLEVBQUU7d0JBQy9DLFFBQVEsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUUsQ0FBTSxJQUFNLE9BQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQVYsQ0FBVSxDQUFFO3FCQUN4RCxDQUFDLEVBRjJCLENBRTNCLENBQUMsQ0FBQztnQkFDUixDQUFDO2FBQ0osQ0FBQyxDQUFBO1FBQ04sQ0FBQztRQUdELFFBQVEsWUFBQyxFQUFzQjtnQkFBcEIsZ0NBQWE7WUFDZCxJQUFBLGNBQStDLEVBQTdDLDRCQUFXLEVBQUUsY0FBSSxFQUFFLFlBQTBCLENBQUM7WUFDOUMsSUFBQSwrQkFBRyxDQUEyQjtZQUd0QyxJQUFLLEdBQUcsR0FBRyxDQUFDLEVBQUc7Z0JBQ1gsSUFBSyxXQUFXLENBQUMsUUFBUSxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUUsRUFBRTtvQkFDakMsSUFBTSxLQUFLLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxVQUFFLENBQU0sSUFBTSxPQUFBLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxFQUFaLENBQVksQ0FBRSxDQUFDO29CQUNqRSxXQUFXLENBQUMsTUFBTSxDQUFFLEtBQUssRUFBRSxDQUFDLENBQUUsQ0FBQztvQkFDOUIsSUFBWSxDQUFDLE9BQU8sQ0FBQzt3QkFDbEIsV0FBVyxFQUFPLFdBQVcsUUFBRTtxQkFDbEMsQ0FBQyxDQUFDO2lCQUNOO3FCQUFNO29CQUNILFdBQVcsQ0FBQyxJQUFJLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDO29CQUMxQixJQUFZLENBQUMsT0FBTyxDQUFDO3dCQUNsQixXQUFXLEVBQU8sV0FBVyxRQUFFO3FCQUNsQyxDQUFDLENBQUM7aUJBQ047Z0JBQUEsQ0FBQzthQUVMO2lCQUFNO2dCQUNGLElBQVksQ0FBQyxPQUFPLENBQUM7b0JBQ2xCLFdBQVcsRUFBRSxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUU7aUJBQzFCLENBQUMsQ0FBQzthQUNOO1lBR0QsSUFBTSxXQUFXLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUUsQ0FBTTtvQkFDaEIsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFFLENBQU0sSUFBTSxPQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFWLENBQVUsQ0FBRSxDQUFDO2dCQUN6RCxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNKLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDO1lBQ2QsSUFBWSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFFLENBQUM7UUFDdkQsQ0FBQztLQUNKO0lBRUQsUUFBUSxFQUFFO1FBQ04sSUFBSSxDQUFDLFdBQVcsRUFBRyxDQUFDO0lBQ3hCLENBQUM7Q0FDSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYXZUbyB9IGZyb20gJy4uLy4uL3V0aWxzL3JvdXRlLmpzJztcbmltcG9ydCB7IGh0dHAgfSBmcm9tICcuLi8uLi91dGlscy9odHRwLmpzJztcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAnLi4vLi4vbGliL3Z1ZWZ5L2luZGV4LmpzJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIOagh+etvumAieaLqVxuICovXG5Db21wb25lbnQoe1xuXG4gICAgLyoqXG4gICAgICog57uE5Lu255qE5bGe5oCn5YiX6KGoXG4gICAgICovXG4gICAgcHJvcGVydGllczoge1xuXG4gICAgICAgIC8vIOmAiemhuVxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIOacgOWkp+WPr+mAiVxuICAgICAgICBtYXg6IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIHZhbHVlOiAxXG4gICAgICAgIH1cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnu4Tku7bnmoTliJ3lp4vmlbDmja5cbiAgICAgKi9cbiAgICBkYXRhOiB7XG5cbiAgICAgICAgLy8g5bey6YCJXG4gICAgICAgIHNlbGVjdGVkSWRzOiBbIF1cbiAgICB9LFxuICBcbiAgICAvKipcbiAgICAgKiDnu4Tku7bnmoTmlrnms5XliJfooahcbiAgICAgKi9cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgcnVuQ29tcHV0ZWQoICkge1xuICAgICAgICAgICAgY29tcHV0ZWQoIHRoaXMsIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvKiog6YCJ6aG5ICovXG4gICAgICAgICAgICAgICAgdGFncyQoICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGEsIHNlbGVjdGVkSWRzIH0gPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLm1hcCgoIHg6IGFueSkgPT4gT2JqZWN0LmFzc2lnbih7IH0sIHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBzZWxlY3RlZElkcy5maW5kKCggeTogYW55ICkgPT4geSA9PT0geC5pZCApXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKiDpgInmi6nmoIfnrb4gKi9cbiAgICAgICAgb25TZWxlY3QoeyBjdXJyZW50VGFyZ2V0IH06IGFueSApIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0ZWRJZHMsIGRhdGEsIG1heCB9ID0gKHRoaXMgYXMgYW55KS5kYXRhO1xuICAgICAgICAgICAgY29uc3QgeyB0YWcgfSA9IGN1cnJlbnRUYXJnZXQuZGF0YXNldDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g5aaC5p6c5piv5aSa6YCJXG4gICAgICAgICAgICBpZiAoIG1heCA+IDEgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBzZWxlY3RlZElkcy5pbmNsdWRlcyggdGFnLmlkICkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzZWxlY3RlZElkcy5maW5kSW5kZXgoKCB4OiBhbnkgKSA9PiB4ID09PSB0YWcuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJZHMuc3BsaWNlKCBpbmRleCwgMSApO1xuICAgICAgICAgICAgICAgICAgICAodGhpcyBhcyBhbnkpLnNldERhdGEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRJZHM6IFsgLi4uc2VsZWN0ZWRJZHMgXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZElkcy5wdXNoKCB0YWcuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMgYXMgYW55KS5zZXREYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSWRzOiBbIC4uLnNlbGVjdGVkSWRzIF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIOWmguaenOaYr+WNlemAiVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAodGhpcyBhcyBhbnkpLnNldERhdGEoe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZElkczogWyB0YWcuaWQgXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyB0cmlnZ2Vy5LiA5LiLXG4gICAgICAgICAgICBjb25zdCBhbGxTZWxlY3RlZCA9IG1heCA+IDEgP1xuICAgICAgICAgICAgICAgIGRhdGEuZmlsdGVyKCggeDogYW55ICkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFzZWxlY3RlZElkcy5maW5kKCggeTogYW55ICkgPT4geSA9PT0geC5pZCApO1xuICAgICAgICAgICAgICAgIH0pIDpcbiAgICAgICAgICAgICAgICBbIHRhZy5pZCBdO1xuICAgICAgICAgICAgKHRoaXMgYXMgYW55KS50cmlnZ2VyRXZlbnQoJ2NoYW5nZScsIGFsbFNlbGVjdGVkICk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYXR0YWNoZWQ6IGZ1bmN0aW9uKCApIHtcbiAgICAgICAgdGhpcy5ydW5Db21wdXRlZCggKTtcbiAgICB9XG59KVxuICAiXX0=