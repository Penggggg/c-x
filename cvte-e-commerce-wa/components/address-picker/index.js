"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_js_1 = require("../../utils/http.js");
var index_js_1 = require("../../lib/vuefy/index.js");
var index_1 = require("../../config/index");
Component({
    properties: {
        url: {
            type: String,
            value: index_1.default.host.default + "/apis/common/address"
        },
        query: {
            type: String,
            value: 'parentCode'
        },
        listKey: {
            type: String,
            value: 'list'
        },
        labelKey: {
            type: String,
            value: 'areaName'
        },
        valueKey: {
            type: String,
            value: 'areaCode'
        },
        parentKey: {
            type: String,
            value: 'parentCode'
        },
        columns: {
            type: Number,
            value: 3
        },
        placeholder: {
            type: String,
            value: '请选择地址'
        },
        defaultValue: {
            type: Array,
            value: [],
            observer: 'initByDefault'
        },
        initData: {
            type: Boolean,
            value: true
        }
    },
    data: {
        optArr: [],
        answerArr: [],
        sureAnswerArr: []
    },
    methods: {
        runComputed: function () {
            index_js_1.computed(this, {
                answerText$: function () {
                    var text = '';
                    var this_ = this;
                    var sureAnswerArr = this_.data.sureAnswerArr;
                    sureAnswerArr.map(function (x) { return text += " " + x.label; });
                    return text;
                }
            });
        },
        fetchNext: function (code, index, autoNext) {
            var _this = this;
            if (code === void 0) { code = ''; }
            if (index === void 0) { index = 0; }
            if (autoNext === void 0) { autoNext = false; }
            var this_ = this;
            var _a = this_.data, listKey = _a.listKey, optArr = _a.optArr, columns = _a.columns, url = _a.url, query = _a.query;
            if (index >= columns) {
                return;
            }
            return http_js_1.http({
                allUrl: url + "?" + (code ? query + "=" + code : '') + "&" + (code === '' ? 'level=1' : '') + "&pageSize=999&isChina=1"
            }).then(function (res) {
                var status = res.status, data = res.data;
                if (status !== 200) {
                    return;
                }
                var list = listKey ? data[listKey] : data;
                var dealMeta = _this.dealListMeta(list);
                optArr.splice(index, 1, dealMeta);
                this_.setData({
                    optArr: optArr
                });
                if (autoNext && index < columns - 1 && dealMeta.length > 0) {
                    _this.fetchNext(dealMeta[0].value, index + 1, true);
                }
                return dealMeta;
            });
        },
        dealListMeta: function (item) {
            var this_ = this;
            var _a = this_.data, valueKey = _a.valueKey, labelKey = _a.labelKey, parentKey = _a.parentKey;
            return item
                .map(function (i) { return ({
                value: i[valueKey],
                label: i[labelKey],
                parentCode: i[parentKey]
            }); })
                .filter(function (i) {
                return !i.label.includes('台湾') &&
                    !i.label.includes('香港') &&
                    !i.label.includes('澳门');
            });
        },
        initAnswer: function () {
            var this_ = this;
            var columns = this_.data.columns;
            var arr = [];
            for (var i = 0; i < columns; i++) {
                arr.push(0);
            }
            this_.setData({
                answerArr: arr
            });
        },
        onPickerChange: function (e) {
            var this_ = this;
            var _a = this_.data, answerArr = _a.answerArr, optArr = _a.optArr;
            var sureAnswerArr = answerArr.map(function (columnAnswer, index) {
                var target = optArr[index][columnAnswer];
                return target || {};
            });
            this_.setData({
                sureAnswerArr: sureAnswerArr
            });
            this_.triggerEvent('change', sureAnswerArr);
        },
        onColumnChange: function (e) {
            var this_ = this;
            var _a = e.detail, column = _a.column, value = _a.value;
            var _b = this_.data, optArr = _b.optArr, columns = _b.columns;
            var answerArr = this_.data.answerArr.slice();
            answerArr.splice(column, 1, value);
            var newAnswerArr = answerArr.slice(0, column + 1);
            for (var i = column + 1; i < columns; i++) {
                newAnswerArr.push(0);
            }
            this_.setData({
                answerArr: newAnswerArr
            });
            var current = optArr[column][value];
            this.fetchNext(current.value, column + 1, true);
        },
        initByDefault: function (v) {
            var _this = this;
            if (Array.isArray(v) && v.length === 0) {
                return;
            }
            var this_ = this;
            var _a = this_.data, labelKey = _a.labelKey, valueKey = _a.valueKey, sureAnswerArr = _a.sureAnswerArr, columns = _a.columns;
            var defaultValueArr = v.map(function (x) { return ({
                label: x[labelKey] || x.label,
                value: x[valueKey] || x.value
            }); });
            this_.setData({
                sureAnswerArr: defaultValueArr
            });
            defaultValueArr.slice(0, defaultValueArr.length - 1);
            var someDifferent = sureAnswerArr.some(function (item, k) {
                return typeof item !== 'object' || item.value !== defaultValueArr[k].value;
            });
            if (!someDifferent && sureAnswerArr.length === defaultValueArr.length) {
                return;
            }
            Promise.all([
                this.fetchNext('')
            ].concat(defaultValueArr
                .slice(0, defaultValueArr.length - 1)
                .map(function (defaultValueMeta, index) {
                return _this.fetchNext(defaultValueMeta.value, index + 1);
            }))).then(function (res) {
                setTimeout(function () {
                    var answerArr = defaultValueArr.map(function (defaultValueMeta, index) {
                        var targeIndex = res[index].findIndex(function (x) { return x.value === defaultValueMeta.value; });
                        return targeIndex === -1 ? 0 : targeIndex;
                    });
                    this_.setData({
                        answerArr: answerArr,
                        optArr: res
                    });
                }, 100);
            });
        }
    },
    attached: function () {
        var _a = this.data, defaultValue = _a.defaultValue, initData = _a.initData;
        this.runComputed();
        this.initAnswer();
        if (initData && defaultValue.length === 0) {
            this.fetchNext('', 0, true);
        }
        else {
        }
    }
});
//# sourceMappingURL=data:application/json;base64,